import { NextResponse } from 'next/server'
import { db } from '@/shared/db/redis'
import { UserRole, SubscriptionTier, ExperienceLevel } from '@/shared/types/enums'
import type { User, ProductionProfile, ApiResponse } from '@/shared/types/database'

export const dynamic = 'force-dynamic'

export async function POST() {
	try {
		console.log('üîß Initializing data in Redis...')
		const now = new Date().toISOString()

		// Create test users
		const testUsers: User[] = [
			{
				id: 'admin-test-123',
				email: 'admin@skillout.pro',
				role: UserRole.Admin,
				createdAt: now,
				updatedAt: now,
				isVerified: true,
				subscriptionTier: SubscriptionTier.Free,
				inviteQuota: { creator: 1000, production: 500, producer: 2000 },
				invitesUsed: { creator: 0, production: 0, producer: 0 },
				invitesCreated: [],
				quotaLastReset: now
			},
			{
				id: 'user-1',
				email: 'alexey@example.com',
				role: UserRole.Production,
				createdAt: now,
				updatedAt: now,
				isVerified: true,
				subscriptionTier: SubscriptionTier.Production,
				inviteQuota: { creator: 10, production: 2, producer: 20 },
				invitesUsed: { creator: 0, production: 0, producer: 0 },
				invitesCreated: [],
				quotaLastReset: now
			},
			{
				id: 'user-2',
				email: 'maria@example.com',
				role: UserRole.Production,
				createdAt: now,
				updatedAt: now,
				isVerified: true,
				subscriptionTier: SubscriptionTier.Production,
				inviteQuota: { creator: 10, production: 2, producer: 20 },
				invitesUsed: { creator: 0, production: 0, producer: 0 },
				invitesCreated: [],
				quotaLastReset: now
			},
			{
				id: 'user-3',
				email: 'dmitry@example.com',
				role: UserRole.Creator,
				createdAt: now,
				updatedAt: now,
				isVerified: true,
				subscriptionTier: SubscriptionTier.Free,
				inviteQuota: { creator: 2, production: 0, producer: 5 },
				invitesUsed: { creator: 0, production: 0, producer: 0 },
				invitesCreated: [],
				quotaLastReset: now
			}
		]

		// Create creator profiles
		const productionfiles: ProductionProfile[] = [
			{
				id: 'user-1',
				userId: 'user-1',
				name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
				bio: '–û–ø—ã—Ç–Ω—ã–π –≤–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂–µ—Ä —Å 5-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–æ–ª–∏–∫–∞—Ö –∏ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–ø–∞—Ö.',
				avatar: undefined,
				specialization: ['–í–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂', '–¶–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è', '–ê–Ω–∏–º–∞—Ü–∏—è'],
				tools: ['Adobe Premiere Pro', 'After Effects', 'DaVinci Resolve'],
				experience: ExperienceLevel.TwoPlus,
				clients: ['Nike', 'Adidas', 'Coca-Cola'],
				portfolio: [
					{ id: 'user-1-1', title: '–†–µ–∫–ª–∞–º–∞ Nike', videoUrl: 'https://example.com/video1', thumbnail: undefined, tags: ['—Ä–µ–∫–ª–∞–º–∞', '—Å–ø–æ—Ä—Ç'], createdAt: now },
					{ id: 'user-1-2', title: '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –∫–ª–∏–ø', videoUrl: 'https://example.com/video2', thumbnail: undefined, tags: ['–º—É–∑—ã–∫–∞', '–∫–ª–∏–ø'], createdAt: now }
				],
				achievements: [],
				rating: 4.8,
				recommendations: [],
				badges: [],
				contacts: {
					telegram: '@alexey_editor',
					instagram: '@alexey_creative',
					behance: 'alexey-petrov',
					linkedin: 'alexey-petrov-editor'
				},
				isPublic: true,
				isPro: true,
				createdAt: now,
				updatedAt: now
			},
			{
				id: 'user-2',
				userId: 'user-2',
				name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
				bio: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä. –°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤.',
				avatar: undefined,
				specialization: ['–û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞', '–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–°—ä–µ–º–∫–∞'],
				tools: ['Sony FX6', 'Canon C300', 'Adobe Creative Suite'],
				experience: ExperienceLevel.TwoPlus,
				clients: ['Apple', 'Samsung', 'Tesla'],
				portfolio: [
					{ id: 'user-2-1', title: 'Apple Commercial', videoUrl: 'https://example.com/video3', thumbnail: undefined, tags: ['—Ä–µ–∫–ª–∞–º–∞', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'], createdAt: now },
					{ id: 'user-2-2', title: 'Tesla Promo', videoUrl: 'https://example.com/video4', thumbnail: undefined, tags: ['–∞–≤—Ç–æ–º–æ–±–∏–ª–∏', '–ø—Ä–æ–º–æ'], createdAt: now }
				],
				achievements: [],
				rating: 4.9,
				recommendations: [],
				badges: [],
				contacts: {
					telegram: '@maria_director',
					instagram: '@maria_creative',
					behance: 'maria-sidorova',
					linkedin: 'maria-sidorova-director'
				},
				isPublic: true,
				isPro: true,
				createdAt: now,
				updatedAt: now
			},
			{
				id: 'user-3',
				userId: 'user-3',
				name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
				bio: '–ú–æ–ª–æ–¥–æ–π —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–π –≤–∏–¥–µ–æ–º–æ–Ω—Ç–∞–∂–µ—Ä. –°–æ–∑–¥–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π.',
				avatar: undefined,
				specialization: ['–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', '–ö–æ—Ä–æ—Ç–∫–∏–µ –≤–∏–¥–µ–æ', '–ú–æ–Ω—Ç–∞–∂'],
				tools: ['Adobe Premiere Pro', 'After Effects', 'CapCut'],
				experience: ExperienceLevel.OneToTwo,
				clients: ['Instagram Influencers', 'TikTok Creators'],
				portfolio: [
					{ id: 'user-3-1', title: 'TikTok Viral', videoUrl: 'https://example.com/video5', thumbnail: undefined, tags: ['tiktok', 'viral'], createdAt: now },
					{ id: 'user-3-2', title: 'Instagram Reel', videoUrl: 'https://example.com/video6', thumbnail: undefined, tags: ['instagram', 'reel'], createdAt: now }
				],
				achievements: [],
				rating: 4.5,
				recommendations: [],
				badges: [],
				contacts: {
					telegram: '@dmitry_editor',
					instagram: '@dmitry_creative',
					behance: 'dmitry-kozlov',
					linkedin: 'dmitry-kozlov-editor'
				},
				isPublic: true,
				isPro: false,
				createdAt: now,
				updatedAt: now
			}
		]

		// Save users to Redis
		for (const user of testUsers) {
			try {
				await db.setUser(user.id, user)
				console.log(`‚úÖ User ${user.email} saved to Redis`)
			} catch (error) {
				console.error(`‚ùå Failed to save user ${user.email} to Redis:`, error)
			}
		}

		// Save profiles to Redis
		for (const profile of productionfiles) {
			try {
				await db.setProfile(profile.id, profile)
				console.log(`‚úÖ Profile ${profile.name} saved to Redis`)
			} catch (error) {
				console.error(`‚ùå Failed to save profile ${profile.name} to Redis:`, error)
			}
		}

		console.log('‚úÖ Data initialization completed')

		return NextResponse.json<ApiResponse<{ users: number; profiles: number }>>({
			success: true,
			data: {
				users: testUsers.length,
				profiles: productionfiles.length
			},
			message: 'Data initialized successfully in Redis'
		})

	} catch (error) {
		console.error('‚ùå Data initialization error:', error)
		return NextResponse.json<ApiResponse<null>>({
			success: false,
			error: 'Failed to initialize data'
		}, { status: 500 })
	}
}
